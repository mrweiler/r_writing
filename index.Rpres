R-Skripte erstellen und dokumentieren
========================================================
author: Matthias Weiler
date: 14.08.2018
autosize: true
transition: concave

Folien online
========================================================

https://mrweiler.github.io/r-documentation


Vorbereitungen für heute
========================================================

- Installiert die beiden Pakete "lintr" und "styler"
- sowie R und RStudio


Übung
========================================================
- Sucht euch 100 Zeilen R-Code und speichert diesen  
  unter dem Namen ```ugly_code.R``` ab
- Bevorzugt: eigener Code
- Alternativ: Google-Suche nach "ugly r code"


Ziele für heute
========================================================

- Lesbarkeit von Code erhöhen
- Bereitschaft erhöhen eigenen  
  Code mit anderen zu teilen


Lesbarkeit erhöhen
========================================================

- Auswahl der Sprache (für Code und Kommentare)
- Konventionen befolgen (coding style)


Englisch oder nicht?
========================================================

Was macht dieser Code?

```{r eval=FALSE}
# Najpierw oblicz średnią
ortalama <- toplam / sayı
```


Übung
========================================================
- Ist euer Code in ugly_code.R auf Englisch verfasst?
- ... und kommentiert?
- Seht ihr dabei Schwierigkeiten?


Konventionen (Übersicht)
========================================================
- Variablennamen
- Leerzeichen
- Zeilenlänge
- Einrückung
- Zuweisung
- ...


Tidyverse style guide
========================================================

http://style.tidyverse.org/


Style-Fehler suchen mit dem "lintr" Paket
========================================================
```{r eval=FALSE}
lintr::lint("ugly_code.R")
```


Übung
========================================================
- Überprüft euren Code
- Versteht ihr die Rückmeldungen von lintr?


Auto-Style mit dem "styler" Paket
========================================================
```{r eval=FALSE}
styler::style_file("ugly_code.R")
```


Übung
========================================================
- Verpasst eurem Code einen freshen Style
- Nutzt dazu ebenfalls das styler-Addin


Fragen?
========================================================


R Markdown
========================================================
- Auszeichnungssprache zur Erstellung von Dokumenten 
- [R Markdown Übersicht]  
  (https://rmarkdown.rstudio.com/)


Übung
========================================================
- Erstellt in RStudio ein R Markdown Dokument
- Speichert es ab unter ugly_code.Rmd


R Markdown Basics
========================================================
- [R Markdown Basics]
  (https://rmarkdown.rstudio.com/authoring_basics.html)
  

Übung
========================================================
Ergänzt das soeben erstellte R Markdown Dokument um:
- eine Überschrift Größe 2
- eine kurze Beschreibung eines Ausschnitts eures R Codes
- einen Ausschnitt eures R Codes


Tipp
========================================================
__Don't repeat yourself aka DRY-Prinzip__


Übung
========================================================
- Bindet einen Abschnitt eures R Codes in eurem  
  R Markdown Dokument ein


Fragen?
========================================================


Links
========================================================

- [The tidyverse style guide]
  (http://style.tidyverse.org/)  
- [Non-invasive pretty-printing of R source code]
  (http://styler.r-lib.org/)
- [Static code analysis for R]
  (https://cran.r-project.org/web/packages/lintr/README.html)  
- [R Markdown Übersicht]  
  (https://rmarkdown.rstudio.com/)
- [R Markdown Basics]
  (https://rmarkdown.rstudio.com/authoring_basics.html)
- [R Markdown: The Definitive Guide]
  (https://bookdown.org/yihui/rmarkdown/)
  